name: release

on:
  workflow_dispatch:
  create:
    tags:
      - '*'

jobs:
  check_state:
    name: 'Check if a tag has been created or the workflow has been used'
    if: (github.event_name == 'create' && github.event.ref_type == 'tag') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - run: echo "Release can start"

  create_bundles:
    needs: [ check_state ]
    name: 'Create bundle for ${{ matrix.os }}'
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}

    steps:
      - name: 'Set up JDK'
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: '25'

      - name: 'Prepare git'
        run: git config --global core.autocrlf false

      - name: 'Prepare branch name'
        if: (github.event_name == 'create' && github.event.ref_type == 'tag')
        run: >
          echo "refName=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: 'Checkout relevant branch'
        uses: actions/checkout@v4
        with:
          ref: ${{ env.refName }}

      - name: 'Create bundle'
        run: >
          ./mvnw --no-transfer-progress package

      - name: 'Upload build artifact'
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.os }}-jvm
          path: target/artifacts/garmin-babel*.zip

  create_native_bundles:
    needs: [ check_state ]
    name: 'Create native bundle for ${{ matrix.os }}'
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}

    steps:
      - name: 'Set up Graal'
        uses: graalvm/setup-graalvm@v1
        with:
          distribution: 'graalvm'
          java-version: '25'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Prepare git'
        run: git config --global core.autocrlf false

      - name: 'Prepare branch name'
        if: (github.event_name == 'create' && github.event.ref_type == 'tag')
        run: >
          echo "refName=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: 'Checkout relevant branch'
        uses: actions/checkout@v4
        with:
          ref: ${{ env.refName }}

      - name: 'Create bundle'
        run: >
          ./mvnw --no-transfer-progress -Dnative -pl app package

      - name: 'Upload build artifact'
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.os }}-native
          path: target/artifacts/garmin-babel*.zip

  create_noarch_bundle:
    needs: [ check_state ]
    name: 'Create plain Java bundle'
    runs-on: ubuntu-latest

    steps:
      - name: 'Set up JDK'
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: '25'

      - name: 'Prepare git'
        run: git config --global core.autocrlf false

      - name: 'Prepare branch name'
        if: (github.event_name == 'create' && github.event.ref_type == 'tag')
        run: >
          echo "refName=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: 'Checkout relevant branch'
        uses: actions/checkout@v4
        with:
          ref: ${{ env.refName }}

      - name: 'Create bundle'
        run: >
          ./mvnw --no-transfer-progress -Dnoarch -pl app package

      - name: 'Upload build artifact'
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-noarch
          path: target/artifacts/garmin-babel*.zip

  release:
    needs: [ create_bundles, create_native_bundles, create_noarch_bundle ]
    runs-on: ubuntu-latest
    steps:
      - name: 'Prepare branch name'
        if: (github.event_name == 'create' && github.event.ref_type == 'tag')
        run: >
          echo "refName=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: 'Checkout relevant branch'
        uses: actions/checkout@v4
        with:
          ref: ${{ env.refName }}
          fetch-depth: 0

      - name: 'Download all build artifacts'
        uses: actions/download-artifact@v4
        with:
          pattern: artifacts-*
          path: target/artifacts
          merge-multiple: true

      - name: 'Create release'
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./mvnw --no-transfer-progress jreleaser:full-release
